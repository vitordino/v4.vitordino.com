---
import Row from './Row.astro'
import Column from './Column.astro'

export type Props = { title?: string }
const { title } = Astro.props
---

<section class='relative break-inside-avoid'>
	<div class='hidden border-b border-slate-4 bg-slate-1 lg:block'></div>
	<Row container>
		<Column
			xs={16}
			lg={3}
			xl={2}
			class='sticky top-0 bg-slate-1 print:relative lg:relative lg:top-0 lg:border-none lg:bg-transparent lg:pb-4 lg:pt-0'
		>
			<h2
				data-home-section-title
				class='absolute inline-block py-3 text-slate-9 will-change-transform lg:sticky lg:top-4 lg:mt-4 lg:py-0'
			>
				{title}
			</h2>
			<div class='h-12 lg:hidden'></div>
			<div class='-mx-4 border-b border-slate-4 print:mx-0 md:-mx-8 lg:hidden'></div>
		</Column>
		<Column xs={0} xl={2} xxl={3} />
		<Column xs={16} lg={12} xl={8} xxl={6} class='pt-10 lg:pt-4'>
			<ul>
				<slot />
			</ul>
		</Column>
	</Row>
</section>
<script>
	const isMobile = 'ontouchend' in document
	const update = (element: HTMLHeadingElement, initialY: number) => {
		if (window.innerWidth >= 1024) {
			element.style.transform = `translateX(0px)`
			return
		}
		const y = isMobile ? initialY - scrollY : element.getBoundingClientRect().y
		if (window.innerWidth >= 768) {
			const x = Math.min(Math.max(-y + 48, 0), 16)
			element.style.transform = `translateX(${x}px)`
			return
		}
		const x = Math.min(Math.max(-y + 48, 0), 28)
		element.style.transform = `translateX(${x}px)`
	}
	const setup = (element: HTMLHeadingElement) => {
		const initialY = element.getBoundingClientRect().y
		const listener = () => update(element, initialY)
		window.addEventListener('scroll', listener)
		window.addEventListener('resize', listener)
		listener()
	}
	document.querySelectorAll<HTMLHeadingElement>('[data-home-section-title]').forEach(setup)
</script>
